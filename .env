--------------------Gmail----------------------
MAIL_USERNAME=tanishqparashar2@gmail.com
MAIL_PASSWORD=frwytcnekntgpxgd

--------------------Google Auth----------------------
client_id="http://389441035592-flg658c4n7an50d80cr7qtoh4fslims2.apps.googleusercontent.com",
client_secret="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",

--------------------Github Auth----------------------
client_id = "Ov23liY242XNZTsbvaDm"
client_secret = "377e3eac72538483316028062dede02a18251e78"


.code-container {
            background: #0d1117;
            border-radius: 8px;
            overflow: hidden;
            position: relative;
            max-height: 300px;
            overflow-y: auto;
        }

        .code-content {
            padding: 15px;
            color: #c9d1d9;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 0.8rem;
            line-height: 1.4;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        /* Enhanced action section */
        .action-section {
            background: var(--card-bg);
            backdrop-filter: blur(10px);
            border: var(--card-border);
            border-radius: 20px;
            padding: 40px;
            box-shadow: var(--card-shadow);
            text-align: center;
        }

        .action-title {
            color: var(--light-text);
            font-size: 1.8rem;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .action-buttons {
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 30px;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 10px;
            text-decoration: none;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(45deg, var(--primary-color), var(--accent-color));
            color: white;
            box-shadow: 0 4px 15px rgba(0, 188, 212, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 188, 212, 0.4);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light-text);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.15);
            border-color: var(--primary-color);
            transform: translateY(-2px);
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background: #218838;
            transform: translateY(-2px);
        }

        .enhancement-info {
            background: rgba(0, 188, 212, 0.1);
            border: 1px solid rgba(0, 188, 212, 0.2);
            border-radius: 15px;
            padding: 20px;
            margin-top: 30px;
        }

        .enhancement-info h4 {
            color: var(--primary-color);
            margin-bottom: 15px;
        }

        .enhancement-features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .feature-item {
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--text-color);
        }

        .feature-item i {
            color: var(--accent-color);
        }

        /* Responsive design */
        @media (max-width: 1200px) {
            .content-grid {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                order: -1;
            }

            .analysis-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .quick-controls {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
                align-items: stretch;
            }
            
            .btn {
                justify-content: center;
            }

            .customization-toolbar {
                margin: 10px;
                padding: 15px;
            }

            .preview-frame.mobile,
            .preview-frame.tablet {
                width: 100%;
                max-width: 100%;
            }
        }

        /* Loading states and animations */
        .loading-spinner {
            border: 3px solid rgba(0, 188, 212, 0.3);
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            display: inline-block;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Enhanced header */
        .header {
            background: rgba(31, 8, 74, 0.95);
            backdrop-filter: blur(10px);
            padding: 20px 0;
            border-bottom: var(--card-border);
            box-shadow: var(--card-shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.8rem;
            font-family: "Orbitron", sans-serif;
            font-weight: 900;
            color: var(--light-text);
        }

        .logo span {
            color: var(--accent-color);
            text-shadow: 0 0 10px var(--accent-color);
        }

        .nav-links {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .nav-links a {
            color: var(--text-color);
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 8px;
            transition: all 0.3s;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nav-links a:hover {
            color: var(--primary-color);
            background: rgba(0, 188, 212, 0.1);
            text-shadow: 0 0 8px rgba(0, 188, 212, 0.5);
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 40px 20px;
        }

        .page-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .page-title {
            font-size: 3rem;
            font-family: "Orbitron", sans-serif;
            color: var(--light-text);
            margin-bottom: 15px;
            text-shadow: 0 0 20px rgba(0, 188, 212, 0.4);
        }

        .page-subtitle {
            font-size: 1.2rem;
            color: var(--text-color);
            max-width: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="logo">
                <span>WEB</span>BUDDY<span style="font-size: 0.6em; color: var(--primary-color);"> AI</span>
            </div>
            <nav class="nav-links">
                <a href="/index"><i class="fas fa-home"></i> Dashboard</a>
                <a href="/history"><i class="fas fa-history"></i> History</a>
                <a href="#" onclick="refreshPreview()"><i class="fas fa-sync-alt"></i> Refresh</a>
                <a href="#" onclick="toggleCustomizationMode()"><i class="fas fa-paint-brush"></i> Customize</a>
                <a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </nav>
        </div>
    </header>

    <div class="container">
        <div class="page-header">
            <h1 class="page-title"><i class="fas fa-magic"></i> AI Generation Complete!</h1>
            <p class="page-subtitle">Your website has been successfully generated using advanced AI matching and customization</p>
        </div>

        <!-- Enhanced Customization Toolbar -->
        <div class="customization-toolbar" id="customization-toolbar">
            <h3 class="toolbar-title">
                <i class="fas fa-palette"></i>
                Live Customization Controls
            </h3>
            
            <div class="quick-controls">
                <div class="control-section">
                    <h4>Colors</h4>
                    <div class="color-controls">
                        <div class="color-control">
                            <input type="color" id="live-text-color" value="#ff69b4">
                            <label>Text</label>
                        </div>
                        <div class="color-control">
                            <input type="color" id="live-bg-color" value="#ffffff">
                            <label>Background</label>
                        </div>
                        <div class="color-control">
                            <input type="color" id="live-button-color" value="#007bff">
                            <label>Buttons</label>
                        </div>
                    </div>
                </div>
                
                <div class="control-section">
                    <h4>Style Theme</h4>
                    <div class="style-buttons">
                        <button class="style-btn" data-style="modern">Modern</button>
                        <button class="style-btn" data-style="cyberpunk">Cyberpunk</button>
                        <button class="style-btn" data-style="glassmorphism">Glass</button>
                        <button class="style-btn" data-style="retro">Retro</button>
                    </div>
                </div>
                
                <div class="control-section">
                    <h4>Typography</h4>
                    <div class="style-buttons">
                        <button class="style-btn" data-typo="bold">Bold</button>
                        <button class="style-btn" data-typo="light">Light</button>
                        <button class="style-btn" data-typo="italic">Italic</button>
                        <button class="style-btn" data-typo="normal">Normal</button>
                    </div>
                </div>
                
                <div class="control-section">
                    <h4>Apply Changes</h4>
                    <button class="apply-changes-btn" onclick="applyLiveCustomizations()">
                        <i class="fas fa-magic"></i>
                        Apply & Preview
                    </button>
                </div>
            </div>
        </div>

        <!-- Enhanced AI Analysis Section -->
        <div class="analysis-section">
            <h2 class="analysis-title"><i class="fas fa-brain"></i> AI Analysis Report</h2>
            
            <div class="analysis-grid">
                <div class="prompt-info">
                    <div class="info-row">
                        <div class="info-label"><i class="fas fa-comment"></i> Your Prompt:</div>
                        <div class="info-value">{{ user_prompt }}</div>
                    </div>
                    <div class="info-row">
                        <div class="info-label"><i class="fas fa-template"></i> Best Match:</div>
                        <div class="info-value">Enhanced Template {{ template_id }} - AI Customized</div>
                    </div>
                    <div class="info-row">
                        <div class="info-label"><i class="fas fa-cogs"></i> Generation Method:</div>
                        <div class="info-value">
                            {% if template_id == 999 %}
                                AI Generated from Scratch with Full Customization
                            {% else %}
                                Template Match with Smart AI Customization
                            {% endif %}
                        </div>
                    </div>
                </div>

                <div class="customization-summary">
                    <h4><i class="fas fa-paint-brush"></i> Applied Customizations</h4>
                    <ul class="customization-list">
                        <li>
                            <span>Color Customization</span>
                            <span class="custom-badge">ACTIVE</span>
                        </li>
                        <li>
                            <span>Typography Enhancement</span>
                            <span class="custom-badge">ACTIVE</span>
                        </li>
                        <li>
                            <span>Layout Optimization</span>
                            <span class="custom-badge">AUTO</span>
                        </li>
                        <li>
                            <span>Animation Effects</span>
                            <span class="custom-badge">ENHANCED</span>
                        </li>
                    </ul>
                </div>
            </div>

            <div class="match-score-visual">
                <div class="score-circle" style="--score-angle: {{ (match_score * 360)|int if match_score else 270 }}deg">
                    <span>{{ "%.0f"|format((match_score * 100) if match_score else 85) }}%</span>
                </div>
                <div class="score-description">
                    <h4>AI Confidence Score</h4>
                    <p>
                        {% if (match_score or 0.85) >= 0.8 %}
                            Excellent match! The AI found a perfect template and applied precise customizations.
                        {% elif (match_score or 0.85) >= 0.6 %}
                            Good match with intelligent adaptations to meet your specific requirements.
                        {% else %}
                            Custom generation created specifically for your unique requirements.
                        {% endif %}
                    </p>
                </div>
            </div>
        </div>

        <!-- Enhanced Main Content Grid -->
        <div class="content-grid">
            <!-- Live Preview Section -->
            <div class="preview-section">
                <div class="preview-controls">
                    <h3 class="section-title"><i class="fas fa-eye"></i> Live Preview</h3>
                    <div class="preview-actions">
                        <button class="preview-btn" onclick="refreshPreview()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button class="preview-btn" onclick="fullscreenPreview()">
                            <i class="fas fa-expand"></i> Fullscreen
                        </button>
                    </div>
                </div>
                
                <div class="device-controls">
                    <button class="device-btn active" data-device="desktop">
                        <i class="fas fa-desktop"></i> Desktop
                    </button>
                    <button class="device-btn" data-device="tablet">
                        <i class="fas fa-tablet"></i> Tablet
                    </button>
                    <button class="device-btn" data-device="mobile">
                        <i class="fas fa-mobile"></i> Mobile
                    </button>
                </div>
                
                <iframe
                    class="preview-frame"
                    id="preview-frame"
                    src="{{ url_for('serve_template_file', template_id=template_id) }}"
                    title="Live Website Preview"
                    frameborder="0">
                </iframe>
            </div>

            <!-- Enhanced Sidebar -->
            <div class="sidebar">
                <div class="stats-panel">
                    <h3 class="section-title"><i class="fas fa-chart-line"></i> Generation Stats</h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-value" id="lines-count">-</div>
                            <div class="stat-label">Lines of Code</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="file-size">-</div>
                            <div class="stat-label">File Size (KB)</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">{{ template_id if template_id != 999 else 'AI' }}</div>
                            <div class="stat-label">Template Used</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value"><1s</div>
                            <div class="stat-label">Generation Time</div>
                        </div>
                    </div>
                </div>

                <div class="code-section">
                    <div class="code-header">
                        <h3 class="section-title"><i class="fas fa-code"></i> Generated Code</h3>
                        <div class="code-actions">
                            <button class="code-btn" onclick="copyCode()" id="copy-btn">
                                <i class="fas fa-copy"></i> Copy
                            </button>
                            <button class="code-btn download" onclick="downloadCode()">
                                <i class="fas fa-download"></i> Download
                            </button>
                        </div>
                    </div>
                    
                    <div class="code-container">
                        <pre class="code-content" id="code-content">Loading code...</pre>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Action Section -->
        <div class="action-section">
            <h2 class="action-title">Ready to Use Your Enhanced Website?</h2>
            <div class="action-buttons">
                <button class="btn btn-success" onclick="handleSatisfied()">
                    <i class="fas fa-check-circle"></i> Perfect! Use This
                </button>
                <a href="/index" class="btn btn-secondary">
                    <i class="fas fa-edit"></i> Create New
                </a>
                <button class="btn btn-primary" onclick="generateVariation()">
                    <i class="fas fa-magic"></i> Generate Variation
                </button>
            </div>

            <div class="enhancement-info">
                <h4><i class="fas fa-star"></i> Enhanced AI Features Used</h4>
                <p style="color: var(--text-color); margin-bottom: 15px;">
                    This generation utilized our advanced AI customization engine for optimal results.
                </p>
                <div class="enhancement-features">
                    <div class="feature-item">
                        <i class="fas fa-palette"></i>
                        <span>Smart Color Detection</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-font"></i>
                        <span>Typography Analysis</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-mobile-alt"></i>
                        <span>Responsive Optimization</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-bolt"></i>
                        <span>Animation Enhancement</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentCode = '';
        let customizationMode = true;

        // Enhanced customization functionality
        let liveCustomizations = {
            colors: {},
            style: 'modern',
            typography: 'normal'
        };

        // Device preview switching
        document.addEventListener('DOMContentLoaded', function() {
            const deviceBtns = document.querySelectorAll('.device-btn');
            const previewFrame = document.getElementById('preview-frame');
            
            deviceBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    deviceBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    const device = this.dataset.device;
                    previewFrame.className = `preview-frame ${device}`;
                });
            });

            // Load and display code
            loadCode();
            
            // Initialize customization controls
            initializeCustomizationControls();
        });

        // Initialize customization controls
        function initializeCustomizationControls() {
            // Color picker changes
            document.querySelectorAll('input[type="color"]').forEach(picker => {
                picker.addEventListener('change', function() {
                    const colorType = this.id.replace('live-', '').replace('-', '_');
                    liveCustomizations.colors[colorType] = this.value;
                    
                    // Show real-time preview if possible
                    if (customizationMode) {
                        previewColorChange(colorType, this.value);
                    }
                });
            });

            // Style button selections
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('style-btn')) {
                    const group = e.target.parentElement;
                    group.querySelectorAll('.style-btn').forEach(btn => btn.classList.remove('active'));
                    e.target.classList.add('active');

                    // Store selection
                    if (e.target.dataset.style) {
                        liveCustomizations.style = e.target.dataset.style;
                    } else if (e.target.dataset.typo) {
                        liveCustomizations.typography = e.target.dataset.typo;
                    }
                }
            });
        }

        // Preview color changes in real-time
        function previewColorChange(colorType, colorValue) {
            const frame = document.getElementById('preview-frame');
            try {
                const frameDoc = frame.contentDocument || frame.contentWindow.document;
                const style = frameDoc.createElement('style');
                style.innerHTML = `
                    .temp-color-override {
                        ${getColorCSS(colorType, colorValue)}
                    }
                `;
                frameDoc.head.appendChild(style);
                
                // Apply temporary class
                frameDoc.body.classList.add('temp-color-override');
                
                // Remove after a short time to show it's a preview
                setTimeout(() => {
                    frameDoc.body.classList.remove('temp-color-override');
                    frameDoc.head.removeChild(style);
                }, 2000);
            } catch (e) {
                console.log('Preview update blocked by frame security');
            }
        }

        function getColorCSS(colorType, colorValue) {
            const cssMap = {
                'text_color': `color: ${colorValue} !important;`,
                'bg_color': `background-color: ${colorValue} !important;`,
                'button_color': `background: ${colorValue} !important;`
            };
            return cssMap[colorType] || '';
        }

        // Apply live customizations
        async function applyLiveCustomizations() {
            try {
                showLoadingState('Applying customizations...');
                
                const customizationData = {
                    template_id: {{ template_id }},
                    customizations: {
                        colors: liveCustomizations.colors,
                        style_preference: liveCustomizations.style,
                        typography: { font_weight: liveCustomizations.typography }
                    }
                };

                const response = await fetch('/api/customize_template', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(customizationData)
                });

                if (response.ok) {
                    // Refresh the preview
                    refreshPreview();
                    showNotification('Customizations applied successfully!', 'success');
                    hideLoadingState();
                } else {
                    throw new Error('Failed to apply customizations');
                }
            } catch (error) {
                console.error('Customization error:', error);
                showNotification('Failed to apply customizations. Please try again.', 'error');
                hideLoadingState();
            }
        }

        // Load code content
        function loadCode() {
            const codeContent = document.getElementById('code-content');
            
            fetch('{{ url_for("serve_template_file", template_id=template_id) }}')
                .then(response => response.text())
                .then(data => {
                    currentCode = data;
                    codeContent.textContent = data;
                    
                    updateCodeStats(data);
                    applySyntaxHighlighting();
                })
                .catch(error => {
                    codeContent.textContent = 'Error loading code: ' + error;
                    console.error('Error loading code:', error);
                });
        }

        // Update code statistics
        function updateCodeStats(code) {
            const lines = code.split('\n').length;
            const sizeKB = (new Blob([code]).size / 1024).toFixed(1);
            
            document.getElementById('lines-count').textContent = lines;
            document.getElementById('file-size').textContent = sizeKB;
        }

        // Basic syntax highlighting
        function applySyntaxHighlighting() {
            const codeContent = document.getElementById('code-content');
            let html = codeContent.innerHTML;
            
            // Basic HTML syntax highlighting
            html = html
                .replace(/(&lt;\/?\w+[^&]*&gt;)/gi, '<span style="color: #f97583;">$1</span>')
                .replace(/(\/\*[\s\S]*?\*\/)/gi, '<span style="color: #6a737d;">$1</span>')
                .replace(/(&quot;[^&]*&quot;)/gi, '<span style="color: #9ecbff;">$1</span>');
            
            codeContent.innerHTML = html;
        }

        // Copy code to clipboard
        function copyCode() {
            navigator.clipboard.writeText(currentCode).then(function() {
                const copyBtn = document.getElementById('copy-btn');
                const originalText = copyBtn.innerHTML;
                copyBtn.innerHTML = '<i class="fas fa-check"></i> Copied!';
                copyBtn.style.background = 'var(--success-color)';
                
                setTimeout(() => {
                    copyBtn.innerHTML = originalText;
                    copyBtn.style.background = '';
                }, 2000);
            }).catch(err => {
                showNotification('Failed to copy code. Please select and copy manually.', 'error');
            });
        }

        // Download code as file
        function downloadCode() {
            const blob = new Blob([currentCode], { type: 'text/html' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `webbuddy-enhanced-${Date.now()}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            showNotification('Code downloaded successfully!', 'success');
        }

        // Enhanced user satisfaction handling
        function handleSatisfied() {
            const modal = createModal(`
                <div style="text-align: center;">
                    <i class="fas fa-check-circle" style="font-size: 3rem; color: var(--success-color); margin-bottom: 20px;"></i>
                    <h3 style="color: var(--light-text); margin-bottom: 15px;">Fantastic!</h3>
                    <p style="color: var(--text-color); margin-bottom: 25px;">
                        Your enhanced AI-generated website is ready to use. What would you like to do next?
                    </p>
                    <div style="display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
                        <button class="btn btn-primary" onclick="downloadCode(); closeModal();">
                            <i class="fas fa-download"></i> Download Code
                        </button>
                        <button class="btn btn-secondary" onclick="shareWebsite();">
                            <i class="fas fa-share-alt"></i> Share
                        </button>
                        <a href="/index" class="btn btn-secondary">
                            <i class="fas fa-plus"></i> Create Another
                        </a>
                    </div>
                </div>
            `);
            
            document.body.appendChild(modal);
        }

        // Generate variation with enhanced options
        function generateVariation() {
            const originalPrompt = `{{ user_prompt }}`;
            const variations = [
                originalPrompt + ' with different color scheme and enhanced animations',
                originalPrompt + ' in a completely different style theme',
                originalPrompt + ' with advanced glassmorphism effects',
                originalPrompt + ' with bold typography and vibrant colors',
                originalPrompt + ' in minimalist design with subtle effects'
            ];
            
            const randomVariation = variations[Math.floor(Math.random() * variations.length)];
            
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/generate';
            
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'query';
            input.value = randomVariation;
            
            form.appendChild(input);
            document.body.appendChild(form);
            
            showLoadingState('Generating enhanced variation...');
            form.submit();
        }

        // Utility functions
        function refreshPreview() {
            const frame = document.getElementById('preview-frame');
            showLoadingState('Refreshing preview...');
            frame.src = frame.src;
            
            setTimeout(() => {
                hideLoadingState();
                showNotification('Preview refreshed!', 'success');
            }, 1000);
        }

        function fullscreenPreview() {
            const frame = document.getElementById('preview-frame');
            if (frame.requestFullscreen) {
                frame.requestFullscreen();
            } else if (frame.webkitRequestFullscreen) {
                frame.webkitRequestFullscreen();
            } else if (frame.msRequestFullscreen) {
                frame.msRequestFullscreen();
            }
        }

        function toggleCustomizationMode() {
            const toolbar = document.getElementById('customization-toolbar');
            customizationMode = !customizationMode;
            
            if (customizationMode) {
                toolbar.style.display = 'block';
                showNotification('Customization mode enabled', 'success');
            } else {
                toolbar.style.display = 'none';
                showNotification('Customization mode disabled', 'info');
            }
        }

        function shareWebsite() {
            if (navigator.share) {
                navigator.share({
                    title: 'My AI Generated Website',
                    text: 'Check out this website I created with WebBuddy AI!',
                    url: window.location.href
                });
            } else {
                // Fallback - copy to clipboard
                navigator.clipboard.writeText(window.location.href).then(() => {
                # Enhanced Website Generator - Complete Code

```